MongoDB is a NoSQL database 
Now what is the difference between a SQL and NoSQL database,
It is document data base 

SQL Databases are relational databases 
Nosql databases are not relational databases

JSON like syntax
Java Script Object Notation 

Sql is basically a strict schema database and requires too many changes when some modification is required 

MongoDB stored data in JSON format and it carry a documented approach 
1-JSON Document 
{Key Value pairs= this is why retrieval of data is very fast}
2-Supports GeoSpatial Query
(depends upon the location of the perosn)
It is capable of keeping the location of the user 
3-It is easily integrated with Big Data Hadoop
4- Highly scalabe and easy to install


Limitation of MongoDB-;
1- It is not appropriate for high transactions databases
2- Sql is prefered in those cases 


Now how to create some database in the MongoDB 

1-Initially create database 
2-Then create collections (whereas in sql you insert the table)
3-Then at last inside collections we insert the JSON data 

Commands - 
1 - use Employee
this will create a database of the name employee and will be visible as soon as we fill some entry in it.

2- db.collection.insertOne()
we can use this to insert some entry in the json format 
and it will reflect it in the database
parameter passed to the function - 

{"FirstName":"Harsh Vardhan","LastName":"Singh"}

3- db.collection.insertMany([{"FirstName":"Harsh Vardhan","LastName":"Singh","Age":29},{"FirstName":"Aman","LastName":"Kumar","Age":29}])


Now how to Query the data from MongoDB
4- db.collection.find({})
   This returns the entire data


Now how to integrate the MongoDB with the python 

To integrate python with MongoDB we need to install the library called PyMongo
Using that library we can interact with MongoDB from python 


import pymongo

#Creation of a pymongo client to interact
#give the connection of your local machine 
#you can also give user name and password 
#and be default port 27017
$ can give protocols 

client = pymongo.MongoClient('localhost',27017)

# create a database 
# simply give the name with client
# can also use client.mydatabase type syntax
mydb = client["Testing"]

# giving the name to your collection 
information = mydb.testinginformation

record = [{'firstnmae':'Harsh1','lastname':'vd','Dept':'D1'},{'firstnmae':'Harsh1','lastname':'vd','Dept':'D1'},{'firstname':'Harsh2','lastname':'vd1','Dept':'D2'},{'firstnmae':'Harsh2','lastname':'vd3','Dept':'D2'}]

#Two methods to insert information 
information.insert_one(record)
information.insert_many(record)



Querying With MongoDB -
Taking out the data from MongoDB using the Queries 
How to query the data will be handled here.

##Simple way of Quering 
empinfo.find_one()= Selecting just top one record

empinfo.find({})= Returns the entire data base
- This will return a cursor (something like pointer)
- so to get all records simply run a for loop to get the entore information 
for i in info.find():
	print(i)

## Querying json document based on equality condition 

Sql - select * from employee where firstname="harsh"

How to do it in MongoDB - write a for loop

for record in empinfo.find({'firstname':'Harsh'}):
	print(record)

## Query operators 
$in - (Relate to IN of Sql):

Looking for a person [master , phd] (either master , phd , get those guys )
{'qualification':{'$in':['phd','master']}}

simply put it in for loop and run it to print records 
and all the data that matches to it filters out of it 

$lt
## And and Query operators 
for record in empinfo.find({'qualification':'master','age':{'lt':35}}):
print(records)


## OR Operators 

for records in empinfo.find({"or":[{'firstname':'Krish'},{'qualification':'master'}):
print(records)

you can simply put $ and to run too 


## How to work with nested documents
record = [{"key":value},{"key":{"nestedKey":value}},{"key":value}]
nested documents are those which will have nested dictionaries 


something like top json document 
and nested json document 

Query -

for records in inventory.find({just put the nested value here and you will get its records })


Record updation in MongoDB -;

inventory.update_one()
- select a record to update
$set operator
outer inner for nested queries 
inventory.update_one({"record":"its value"},"$set":{"outer.inner":"changedvalue",.........add multiple values if you want })
Add one more field 
$currentDate  
allow you to create a date time variable

"$currentDate":{"lastmodified"=True}

Check in mongo db the variable must be updated 

inventory.update_many()
lets say wherever the age is less the 18 
we have to set status as naabalik

inventory.replace_one()
replace the entire record with something else



MONGO DB INEURON :
 
Terms 
MongoDB Server:
the app that you installed is the server
you can perform all kind of the databases operations 

* MongoDB server is like a big container
* Now in the bigger container we can have smaller containers 
* These smaller containers are known databases
* Like - Employee,Customer
* Now inside databases we will have collections
* These collections are similar to a table 
* Each collection have several records 
* These records are similar to Rows

--------------------------------:
DB Admin - Owner of the database
Software developers - the people who use the database

Python UI can be created using Flask and Html 
--------------------------------:
Flow of work 
UI --> Python --> Database
--------------------------------:
Major Operations that you will perform in the database:
Read,Write,Update
--------------------------------:
Database
Collection
Records 


